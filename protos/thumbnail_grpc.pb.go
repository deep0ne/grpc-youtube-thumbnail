// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: thumbnail.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YouTubeThumbnailClient is the client API for YouTubeThumbnail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YouTubeThumbnailClient interface {
	GetThumbnail(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Thumbnail, error)
	SaveThumbnail(ctx context.Context, in *Thumbnail, opts ...grpc.CallOption) (*SaveStatus, error)
}

type youTubeThumbnailClient struct {
	cc grpc.ClientConnInterface
}

func NewYouTubeThumbnailClient(cc grpc.ClientConnInterface) YouTubeThumbnailClient {
	return &youTubeThumbnailClient{cc}
}

func (c *youTubeThumbnailClient) GetThumbnail(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Thumbnail, error) {
	out := new(Thumbnail)
	err := c.cc.Invoke(ctx, "/YouTubeThumbnail/GetThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *youTubeThumbnailClient) SaveThumbnail(ctx context.Context, in *Thumbnail, opts ...grpc.CallOption) (*SaveStatus, error) {
	out := new(SaveStatus)
	err := c.cc.Invoke(ctx, "/YouTubeThumbnail/SaveThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YouTubeThumbnailServer is the server API for YouTubeThumbnail service.
// All implementations must embed UnimplementedYouTubeThumbnailServer
// for forward compatibility
type YouTubeThumbnailServer interface {
	GetThumbnail(context.Context, *Video) (*Thumbnail, error)
	SaveThumbnail(context.Context, *Thumbnail) (*SaveStatus, error)
	mustEmbedUnimplementedYouTubeThumbnailServer()
}

// UnimplementedYouTubeThumbnailServer must be embedded to have forward compatible implementations.
type UnimplementedYouTubeThumbnailServer struct {
}

func (UnimplementedYouTubeThumbnailServer) GetThumbnail(context.Context, *Video) (*Thumbnail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbnail not implemented")
}
func (UnimplementedYouTubeThumbnailServer) SaveThumbnail(context.Context, *Thumbnail) (*SaveStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveThumbnail not implemented")
}
func (UnimplementedYouTubeThumbnailServer) mustEmbedUnimplementedYouTubeThumbnailServer() {}

// UnsafeYouTubeThumbnailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YouTubeThumbnailServer will
// result in compilation errors.
type UnsafeYouTubeThumbnailServer interface {
	mustEmbedUnimplementedYouTubeThumbnailServer()
}

func RegisterYouTubeThumbnailServer(s grpc.ServiceRegistrar, srv YouTubeThumbnailServer) {
	s.RegisterService(&YouTubeThumbnail_ServiceDesc, srv)
}

func _YouTubeThumbnail_GetThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Video)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouTubeThumbnailServer).GetThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YouTubeThumbnail/GetThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouTubeThumbnailServer).GetThumbnail(ctx, req.(*Video))
	}
	return interceptor(ctx, in, info, handler)
}

func _YouTubeThumbnail_SaveThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Thumbnail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YouTubeThumbnailServer).SaveThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YouTubeThumbnail/SaveThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YouTubeThumbnailServer).SaveThumbnail(ctx, req.(*Thumbnail))
	}
	return interceptor(ctx, in, info, handler)
}

// YouTubeThumbnail_ServiceDesc is the grpc.ServiceDesc for YouTubeThumbnail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YouTubeThumbnail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YouTubeThumbnail",
	HandlerType: (*YouTubeThumbnailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThumbnail",
			Handler:    _YouTubeThumbnail_GetThumbnail_Handler,
		},
		{
			MethodName: "SaveThumbnail",
			Handler:    _YouTubeThumbnail_SaveThumbnail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thumbnail.proto",
}
